bpdf[,2] <- factor(bpdf[,2], levels = uvar[varorder])
bpdf[,3] <- factor(bpdf[,3], levels = c("frozen", "ffpe"))
#-----------
# make plot
#----------
ggplot(bpdf, aes(x = ba.control, y = perc.fail, fill = storage.cond)) +
geom_bar(stat = "identity", position = "dodge") + theme_bw() +
scale_fill_manual(values = c("purple", "orange")) +
theme(axis.text.x = element_text(angle = 90))
varval
apply(uvar, 2, function(x){sum(bpdf[bpdf[,2] == x, 1])})
uvar
uvar <- unique(as.character(bpdf[,2]))
varval <- apply(uvar, 2, function(x){sum(bpdf[bpdf[,2] == x, 1])})
uvar
x = uvar[1]
bpdf[bpdf[,2] == x, 1]
bpdf
sum(bpdf[bpdf[,2] == x, 1])
apply(uvar, 2, function(x){sum(bpdf[bpdf[,2] == x, 1])})
uvar
apply(uvar, 2, function(x){
sum(c(bpdf[bpdf[,2] == x, 1]))
})
tf <- bathresh(bf)
bpdf <- matrix(nrow = 0, ncol = 3)
for(c in colnames(tf)){
cd <- tf[rownames(tf) %in% gsmv.frozen, c]
mfail.frozen <- matrix(c(length(cd[cd=="FAIL"])/length(gsmv.frozen), c, "frozen"), nrow = 1)
cd <- tf[rownames(tf) %in% gsmv.ffpe, c]
mfail.ffpe <- matrix(c(length(cd[cd=="FAIL"])/length(gsmv.ffpe), c, "ffpe"), nrow = 1)
if(!(mfail.ffpe[1] == 0 & mfail.frozen[1] == 0)){
bpdf <- rbind(bpdf, rbind(mfail.frozen, mfail.ffpe))
}
}
colnames(bpdf) <- c("perc.fail", "ba.control", "storage.cond")
bpdf <- as.data.frame(bpdf, stringsAsFactors = FALSE)
bpdf[,1] <- as.numeric(bpdf[,1])
#bpdf <- bpdf[!bpdf$perc.fail == 0,]
uvar <- unique(as.character(bpdf[,2]))
varval <- apply(uvar, 2, function(x){
sum(c(bpdf[bpdf[,2] == x, 1]))
})
ggplot(bpdf, aes(x = ba.control, y = perc.fail, fill = storage.cond)) +
geom_bar(stat = "identity", position = "dodge") + theme_bw() +
scale_fill_manual(values = c("purple", "orange")) +
theme(axis.text.x = element_text(angle = 90))
uvar
apply(uvar, 2, function(x){
message(x)
return(sum(c(bpdf[bpdf[,2] == x, 1])))
})
colnames(bpdf) <- c("perc.fail", "ba.control", "storage.cond")
bpdf <- as.data.frame(bpdf, stringsAsFactors = FALSE)
bpdf[,1] <- as.numeric(bpdf[,1])
#bpdf <- bpdf[!bpdf$perc.fail == 0,]
uvar <- unique(as.character(bpdf[,2]))
varval <- bpdf[bpdf$storage.cond == "frozen",1]
varorder <- rev(order(varval))
bpdf[,2] <- factor(bpdf[,2], levels = uvar[varorder])
bpdf[,3] <- factor(bpdf[,3], levels = c("frozen", "ffpe"))
fig2c <- ggplot(bpdf, aes(x = ba.control, y = perc.fail, fill = storage.cond)) +
geom_bar(stat = "identity", position = "dodge") + theme_bw() +
scale_fill_manual(values = c("purple", "orange")) +
theme(axis.text.x = element_text(angle = 90))
fig2c
tf <- bathresh(bf)
bpdf <- matrix(nrow = 0, ncol = 3)
for(c in colnames(tf)){
cd <- tf[rownames(tf) %in% gsmv.frozen, c]
mfail.frozen <- matrix(c(length(cd[cd=="FAIL"])/length(gsmv.frozen), c, "frozen"), nrow = 1)
cd <- tf[rownames(tf) %in% gsmv.ffpe, c]
mfail.ffpe <- matrix(c(length(cd[cd=="FAIL"])/length(gsmv.ffpe), c, "ffpe"), nrow = 1)
if(!(mfail.ffpe[1] == 0 & mfail.frozen[1] == 0)){
bpdf <- rbind(bpdf, rbind(mfail.frozen, mfail.ffpe))
}
}
colnames(bpdf) <- c("perc.fail", "ba.control", "storage.cond")
bpdf <- as.data.frame(bpdf, stringsAsFactors = FALSE)
bpdf[,1] <- as.numeric(bpdf[,1])
#bpdf <- bpdf[!bpdf$perc.fail == 0,]
uvar <- unique(as.character(bpdf[,2]))
varval <- bpdf[bpdf$storage.cond == "ffpe",1]
varorder <- rev(order(varval))
bpdf[,2] <- factor(bpdf[,2], levels = uvar[varorder])
bpdf[,3] <- factor(bpdf[,3], levels = c("frozen", "ffpe"))
#----------
# make plot
#----------
fig2c <- ggplot(bpdf, aes(x = ba.control, y = perc.fail, fill = storage.cond)) +
geom_bar(stat = "identity", position = "dodge") + theme_bw() +
scale_fill_manual(values = c("purple", "orange")) +
theme(axis.text.x = element_text(angle = 90))
fig2c
library(recountmethylationManuscriptSupplement)
pkgname <- "recountmethylationManuscriptSupplement"
scripts.dir <- system.file("scripts", "figures",
package = pkgname)
library(ggplot2)
library(gridExtra)
library(data.table)
knitr::opts_chunk$set(echo = TRUE, eval = FALSE)
script.name <- "fig4ab.R"
source(file.path(scripts.dir, script.name))
#!/usr/bin/env R
# Author: Sean Maden
# Make violin plots of high variance probes in 7 noncancer tissues
# (fig4a and fig4b).
library(ggplot2)
#----------
# load data
#----------
#txfiltl <- get(load(txfiltl.name))
#txnames = names(txfiltl)
pkgname <- "recountmethylationManuscriptSupplement"
nct7.dir <- system.file("extdata", "nct7", package = pkgname)
# fn <- "lfilt_highvar-nc7.rda"
lfn <- "lfilt_cgtables_nct.rda"
txfiltl <- get(load(file.path(nct7.dir, lfn)))
ldfn <- "listdat-top1kmvp-tx_abs-bin_7nct.rda"
txfiltl <- get(load(file.path(nct7.dir, ldfn)))
txnames <- names(txfiltl)
#-----------------------
# prep the plot datasets
#-----------------------
bpdf.mean = matrix(nrow = 0, ncol = 3)
bpdf.var = matrix(nrow = 0, ncol = 3)
# tx colors
tl = c("blood", "buccal", "brain", "sperm", "nasal", "adipose", "liver" ) # index
tc = c("red", "orange", "purple", "blue", "green", "brown", "forestgreen") # color
# get summaries by tissue
for(t in 1:length(txnames)){
tx = txnames[t]; datt = txfiltl[[tx]]
bpdf.mean = rbind(bpdf.mean, data.frame(datt$mean, tc[tl == tx], tx, stringsAsFactors = F))
bpdf.var = rbind(bpdf.var, data.frame(datt$var, tc[tl == tx], tx, stringsAsFactors = F))
}
# format plot data
bpdf.mean = as.data.frame(bpdf.mean, stringsAsFactors = F)
bpdf.var = as.data.frame(bpdf.var, stringsAsFactors = F)
bpdf.mean[,1] = as.numeric(as.character(bpdf.mean[,1]))
bpdf.var[,1] = as.numeric(as.character(bpdf.var[,1]))
colnames(bpdf.mean) = c("mean", "col", "tissue")
colnames(bpdf.var) = c("var", "col", "tissue")
bpdf.mean$tissue = factor(bpdf.mean$tissue, levels = unique(bpdf.mean$tissue))
ordert = order(match(tl, levels(bpdf.mean$tissue)))
bpdf.var$tissue = factor(bpdf.var$tissue, levels = unique(bpdf.var$tissue))
ordert = order(match(tl, levels(bpdf.var$tissue)))
#-------------------
# make plot objects
#-------------------
# means violin plots
fig4a <- ggplot(bpdf.mean, aes(x = tissue, y = mean, fill = tissue)) +
geom_violin(trim = F, show.legend = F) +
scale_fill_manual(values = tc[ordert]) + theme_bw() +
theme(axis.text.x = element_text(angle = 90)) +
xlab("Tissue") + ylab("Mean") +
scale_y_continuous(limits = c(0, 1.2), breaks = seq(0, 1, 0.5))
# variances violin plots
fig4b <- ggplot(bpdf.var, aes(x = tissue, y = var, fill = tissue)) +
geom_violin(trim = F, show.legend = F) +
scale_fill_manual(values = tc[ordert]) + theme_bw() +
theme(axis.text.x = element_text(angle = 90)) +
xlab("Tissue") + ylab("Variance") +
scale_y_continuous(limits = c(0, 0.12), breaks = seq(0, 0.12, 0.06))
fig4a
fig4b
lfn <- "lfilt_cgtables_nct.rda"
txfiltl <- get(load(file.path(nct7.dir, lfn)))
ldfn <- "listdat-top1kmvp-tx_abs-bin_7nct.rda"
txfiltl <- get(load(file.path(nct7.dir, ldfn)))
txnames <- names(txfiltl)
dim(txfiltl[[1]])
lfn <- "lfilt_cgtables_nct.rda"
txfiltl <- get(load(file.path(nct7.dir, lfn)))
dim(txfiltl[[1]])
load("~/Documents/GitHub/recountmethylationManuscriptSupplement/inst/extdata/nct7/ltxfilt-dnamsummary_highvar_nct7.rda")
dim(txfiltl[[1]])
dim(txfiltl[[2]])
names(txfiltl)
#!/usr/bin/env R
# Author: Sean Maden
# Make violin plots of high variance probes in 7 noncancer tissues
# (fig4a and fig4b).
library(ggplot2)
#----------
# load data
#----------
pkgname <- "recountmethylationManuscriptSupplement"
nct7.dir <- system.file("extdata", "nct7", package = pkgname)
tx.fn <- "ltxfilt-dnamsummary_highvar_nct7.rda"
txfiltl <- get(load(file.path(nct7.dir, tx.fn)))
txnames <- names(txfiltl)
#-----------------------
# prep the plot datasets
#-----------------------
bpdf.mean <- matrix(nrow = 0, ncol = 3)
bpdf.var <- matrix(nrow = 0, ncol = 3)
# tx colors
tl <- c("blood", "buccal", "brain", "sperm", "nasal", "adipose", "liver" ) # index
tc <- c("red", "orange", "purple", "blue", "green", "brown", "forestgreen") # color
# get summaries by tissue
for(t in 1:length(txnames)){
tx <- txnames[t]; datt <- txfiltl[[tx]]
bpdf.mean <- rbind(bpdf.mean, data.frame(datt$mean, tc[tl == tx], tx, stringsAsFactors = F))
bpdf.var <- rbind(bpdf.var, data.frame(datt$var, tc[tl == tx], tx, stringsAsFactors = F))
}
# format plot data
bpdf.mean <- as.data.frame(bpdf.mean, stringsAsFactors = F)
bpdf.var <- as.data.frame(bpdf.var, stringsAsFactors = F)
bpdf.mean[,1] <- as.numeric(as.character(bpdf.mean[,1]))
bpdf.var[,1] <- as.numeric(as.character(bpdf.var[,1]))
colnames(bpdf.mean) <- c("mean", "col", "tissue")
colnames(bpdf.var) <- c("var", "col", "tissue")
bpdf.mean$tissue <- factor(bpdf.mean$tissue, levels = unique(bpdf.mean$tissue))
ordert <- order(match(tl, levels(bpdf.mean$tissue)))
bpdf.var$tissue <- factor(bpdf.var$tissue, levels = unique(bpdf.var$tissue))
ordert <- order(match(tl, levels(bpdf.var$tissue)))
#-------------------
# make plot objects
#-------------------
# means violin plots
fig4a <- ggplot(bpdf.mean, aes(x = tissue, y = mean, fill = tissue)) +
geom_violin(trim = F, show.legend = F) +
scale_fill_manual(values = tc[ordert]) + theme_bw() +
theme(axis.text.x = element_text(angle = 90)) +
xlab("Tissue") + ylab("Mean") +
scale_y_continuous(limits = c(0, 1.2), breaks = seq(0, 1, 0.5))
# variances violin plots
fig4b <- ggplot(bpdf.var, aes(x = tissue, y = var, fill = tissue)) +
geom_violin(trim = F, show.legend = F) +
scale_fill_manual(values = tc[ordert]) + theme_bw() +
theme(axis.text.x = element_text(angle = 90)) +
xlab("Tissue") + ylab("Variance") +
scale_y_continuous(limits = c(0, 0.12), breaks = seq(0, 0.12, 0.06))
fig4b
fig4a
script.name <- "fig4c.R"
source(file.path(scripts.dir, script.name))
library(recountmethylationManuscriptSupplement)
pkgname <- "recountmethylationManuscriptSupplement"
scripts.dir <- system.file("scripts", "figures",
package = pkgname)
library(ggplot2)
library(gridExtra)
library(data.table)
knitr::opts_chunk$set(echo = TRUE, eval = FALSE)
script.name <- "fig4c.R"
source(file.path(scripts.dir, script.name))
library(minfiData)
#----------
# load data
#----------
pkgname <- "recountmethylationManuscriptSupplement"
tables.dir <- system.file("extdata", "tables", package = pkgname)
nct7.dir <- system.file("extdata", "nct7", package = pkgname)
ldfn <- "ltxfilt-dnamsummary_highvar_nct7.rda"
txfiltl <- get(load(file.path(nct7.dir, ldfn)))
txnames <- names(txfiltl)
# get minfi-formatted probe annotations
cga <- getAnnotation(get(data("MsetEx")))
#---------------------
# add modified cg anno
#---------------------
prom.stat <- grepl("TSS|5'", cga$UCSC_RefGene_Group)
body.stat <- grepl("Body|Exon|3'", cga$UCSC_RefGene_Group)
cga$gene.type <- ifelse(cga$UCSC_RefGene_Name=="", "intergenic",
ifelse(prom.stat & body.stat, "intragenic_promoter-body",
ifelse(prom.stat & !body.stat, "intragenic_promoter",
"intragenic_body")))
cga$isl.type <- ifelse(cga$Relation_to_Island=="OpenSea", "interisland_opensea",
ifelse(cga$Relation_to_Island=="Island", "intraisland_main",
"intraisland_other"))
cga$type.composite <- paste0(cga$isl.type,";",cga$gene.type)
cga$annocat <- ifelse(cga$Relation_to_Island=="OpenSea" &
cga$UCSC_RefGene_Name=="", "interisland_intergenic",
ifelse(!(cga$Relation_to_Island=="OpenSea") &
cga$UCSC_RefGene_Name=="", "intraisland_intergenic",
ifelse(cga$Relation_to_Island=="OpenSea" &
!(cga$UCSC_RefGene_Name==""), "interisland_intragenic",
ifelse(!(cga$Relation_to_Island=="OpenSea" |
cga$UCSC_RefGene_Name==""),
"intraisland_intragenic", "NA"))))
prom.stat <- grepl("TSS|5'", cga$UCSC_RefGene_Group)
body.stat <- grepl("Body|Exon|3'", cga$UCSC_RefGene_Group)
cga$gene.relation = ifelse(cga$UCSC_RefGene_Name=="", "intergenic",
ifelse(prom.stat & body.stat, "promoter;body",
ifelse(prom.stat & !body.stat, "promoter", "body")))
#------------------------
# barplots, mapping freqs
#------------------------
txnames <- names(txfiltl)
mainplotwidth <- 8; mainplotheight <- 8
legendpos <- "top"
# top 1k mvp, tissue-specific
bpdf <- matrix(nrow = 0, ncol = 3)
which.lltx <- 6
for(ti in 1:length(txnames)){
txname <- txnames[ti]; mvpidt = txfiltl[[txname]]$cgid
tdati <- as.data.frame(table(cga[rownames(cga) %in% mvpidt,]$annocat))
tdati$txname <- txname; bpdf = rbind(bpdf, tdati)
}
colnames(bpdf) <- c("Genomic Region", "Count", "Tissue")
bpdf$Tissue <- factor(bpdf$Tissue, levels=txnames)
# get compact label from region var
bpdf$label <- "NA"
bpdf[bpdf$`Genomic Region` == "interisland_intergenic",]$label <- "Osea;Nogene"
bpdf[bpdf$`Genomic Region` == "interisland_intragenic",]$label <- "Osea;Gene"
bpdf[bpdf$`Genomic Region` == "intraisland_intergenic",]$label <- "Isld;Nogene"
bpdf[bpdf$`Genomic Region` == "intraisland_intragenic",]$label <- "Isld;Gene"
# new plot, compact legend format
p1 <- ggplot(bpdf, aes(x = Tissue, y = Count, fill = label)) +
geom_bar(stat = "identity") + theme_bw() +
theme(axis.text.x = element_text(angle = 90),
legend.title = element_blank(),
legend.position = legendpos,
axis.title.x = element_blank(),
axis.title.y = element_blank()) +
guides(fill = guide_legend(nrow = 2, byrow = TRUE))
#--------------------------
# anno plots: gene relation
#--------------------------
bpdf <- matrix(nrow = 0, ncol = 3)
which.lltx <- 6
for(ti in 1:length(txnames)){
txname <- txnames[ti]; mvpidt = txfiltl[[txname]]$cgid
tdati <- as.data.frame(table(cga[rownames(cga) %in%
mvpidt,]$gene.relation))
tdati$txname <- txname; bpdf = rbind(bpdf, tdati)
}
colnames(bpdf) <- c("Gene Region", "Count", "Tissue")
bpdf$Tissue <- factor(bpdf$Tissue, levels=txnames)
# new compact label from region var
bpdf$label <- "NA"
bpdf[bpdf$`Gene Region` == "body",]$label <- "Body"
bpdf[bpdf$`Gene Region` == "promoter",]$label <- "Prom"
bpdf[bpdf$`Gene Region` == "intergenic",]$label <- "Nogene"
bpdf[bpdf$`Gene Region` == "promoter;body",]$label <- "Prom;Body"
# new plot with compact legend
p2 <- ggplot(bpdf, aes(x = Tissue, y = Count, fill = label)) +
geom_bar(stat = "identity") + theme_bw() +
theme(axis.text.x = element_text(angle = 90),
legend.position = legendpos,
legend.title = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank()) +
guides(fill = guide_legend(nrow = 2, byrow = TRUE))
#-------------------------
# anno plots: isl relation
#-------------------------
# top 1k mvp, tissue-specific
bpdf <- matrix(nrow = 0, ncol = 3)
which.lltx <- 6
for(ti in 1:length(txnames)){
txname <- txnames[ti]; mvpidt = txfiltl[[txname]]$cgid
tdati <- as.data.frame(table(cga[rownames(cga) %in%
mvpidt,]$Relation_to_Island))
tdati$txname <- txname; bpdf = rbind(bpdf, tdati)
}
colnames(bpdf) <- c("Island Region", "Count", "Tissue")
bpdf$Tissue <- factor(bpdf$Tissue, levels=txnames)
# new compact label from region var
bpdf$label <- "NA"
bpdf[bpdf$`Island Region` == "OpenSea",]$label <- "OSea"
bpdf[bpdf$`Island Region` == "Island",]$label <- "Isld"
bpdf[bpdf$`Island Region` == "N_Shelf",]$label <- "Nshl"
bpdf[bpdf$`Island Region` == "N_Shore",]$label <- "Nshr"
bpdf[bpdf$`Island Region` == "S_Shelf",]$label <- "Sshl"
bpdf[bpdf$`Island Region` == "S_Shore",]$label <- "Sshr"
# new plot with compact legend
p3 <- ggplot(bpdf, aes(x = Tissue, y = Count, fill = label)) +
geom_bar(stat = "identity") + theme_bw() +
theme(axis.text.x = element_text(angle = 90),
legend.position = legendpos,
legend.title = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank()) +
guides(fill = guide_legend(nrow = 2, byrow = TRUE))
#---------------------------------------
# composite plot, horizontal arrangement
#---------------------------------------
grid.arrange(p1, p2, p3, ncol = 3, bottom = "Tissue",
left = "Number of\nProbes")
#!/usr/bin/env R
# Author: Sean Maden
# Get genome regions in high variance probes across 7 noncancer tissues,
# then map with stacked barplots (fig4c).
library(minfiData)
#----------
# load data
#----------
pkgname <- "recountmethylationManuscriptSupplement"
tables.dir <- system.file("extdata", "tables", package = pkgname)
nct7.dir <- system.file("extdata", "nct7", package = pkgname)
ldfn <- "ltxfilt-dnamsummary_highvar_nct7.rda"
txfiltl <- get(load(file.path(nct7.dir, ldfn)))
txnames <- names(txfiltl)
# get minfi-formatted probe annotations
cga <- getAnnotation(get(data("MsetEx")))
#---------------------
# add modified cg anno
#---------------------
prom.stat <- grepl("TSS|5'", cga$UCSC_RefGene_Group)
body.stat <- grepl("Body|Exon|3'", cga$UCSC_RefGene_Group)
cga$gene.type <- ifelse(cga$UCSC_RefGene_Name=="", "intergenic",
ifelse(prom.stat & body.stat, "intragenic_promoter-body",
ifelse(prom.stat & !body.stat, "intragenic_promoter",
"intragenic_body")))
cga$isl.type <- ifelse(cga$Relation_to_Island=="OpenSea", "interisland_opensea",
ifelse(cga$Relation_to_Island=="Island", "intraisland_main",
"intraisland_other"))
cga$type.composite <- paste0(cga$isl.type,";",cga$gene.type)
cga$annocat <- ifelse(cga$Relation_to_Island=="OpenSea" &
cga$UCSC_RefGene_Name=="", "interisland_intergenic",
ifelse(!(cga$Relation_to_Island=="OpenSea") &
cga$UCSC_RefGene_Name=="", "intraisland_intergenic",
ifelse(cga$Relation_to_Island=="OpenSea" &
!(cga$UCSC_RefGene_Name==""), "interisland_intragenic",
ifelse(!(cga$Relation_to_Island=="OpenSea" |
cga$UCSC_RefGene_Name==""),
"intraisland_intragenic", "NA"))))
prom.stat <- grepl("TSS|5'", cga$UCSC_RefGene_Group)
body.stat <- grepl("Body|Exon|3'", cga$UCSC_RefGene_Group)
cga$gene.relation = ifelse(cga$UCSC_RefGene_Name=="", "intergenic",
ifelse(prom.stat & body.stat, "promoter;body",
ifelse(prom.stat & !body.stat, "promoter", "body")))
#------------------------
# barplots, mapping freqs
#------------------------
txnames <- names(txfiltl)
mainplotwidth <- 8; mainplotheight <- 8
legendpos <- "top"
# top 1k mvp, tissue-specific
bpdf <- matrix(nrow = 0, ncol = 3)
which.lltx <- 6
for(ti in 1:length(txnames)){
txname <- txnames[ti]; mvpidt = txfiltl[[txname]]$cgid
tdati <- as.data.frame(table(cga[rownames(cga) %in% mvpidt,]$annocat))
tdati$txname <- txname; bpdf = rbind(bpdf, tdati)
}
colnames(bpdf) <- c("Genomic Region", "Count", "Tissue")
bpdf$Tissue <- factor(bpdf$Tissue, levels=txnames)
# get compact label from region var
bpdf$label <- "NA"
bpdf[bpdf$`Genomic Region` == "interisland_intergenic",]$label <- "opensea"
bpdf[bpdf$`Genomic Region` == "interisland_intragenic",]$label <- "opensea;intragenic"
bpdf[bpdf$`Genomic Region` == "intraisland_intergenic",]$label <- "island"
bpdf[bpdf$`Genomic Region` == "intraisland_intragenic",]$label <- "island;intragenic"
# new plot, compact legend format
p1 <- ggplot(bpdf, aes(x = Tissue, y = Count, fill = label)) +
geom_bar(stat = "identity") + theme_bw() +
theme(axis.text.x = element_text(angle = 90),
legend.title = element_blank(),
legend.position = legendpos,
axis.title.x = element_blank(),
axis.title.y = element_blank()) +
guides(fill = guide_legend(nrow = 2, byrow = TRUE))
#--------------------------
# anno plots: gene relation
#--------------------------
bpdf <- matrix(nrow = 0, ncol = 3)
which.lltx <- 6
for(ti in 1:length(txnames)){
txname <- txnames[ti]; mvpidt = txfiltl[[txname]]$cgid
tdati <- as.data.frame(table(cga[rownames(cga) %in%
mvpidt,]$gene.relation))
tdati$txname <- txname; bpdf = rbind(bpdf, tdati)
}
colnames(bpdf) <- c("Gene Region", "Count", "Tissue")
bpdf$Tissue <- factor(bpdf$Tissue, levels=txnames)
# new compact label from region var
bpdf$label <- bpdf$`Gene Region`
# new plot with compact legend
p2 <- ggplot(bpdf, aes(x = Tissue, y = Count, fill = label)) +
geom_bar(stat = "identity") + theme_bw() +
theme(axis.text.x = element_text(angle = 90),
legend.position = legendpos,
legend.title = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank()) +
guides(fill = guide_legend(nrow = 2, byrow = TRUE))
#-------------------------
# anno plots: isl relation
#-------------------------
# top 1k mvp, tissue-specific
bpdf <- matrix(nrow = 0, ncol = 3)
which.lltx <- 6
for(ti in 1:length(txnames)){
txname <- txnames[ti]; mvpidt = txfiltl[[txname]]$cgid
tdati <- as.data.frame(table(cga[rownames(cga) %in%
mvpidt,]$Relation_to_Island))
tdati$txname <- txname; bpdf = rbind(bpdf, tdati)
}
colnames(bpdf) <- c("Island Region", "Count", "Tissue")
bpdf$Tissue <- factor(bpdf$Tissue, levels=txnames)
# new compact label from region var
bpdf$label <- tolower(bpdf$`Island Region`)
bpdf[bpdf$`Island Region` %in% c("N_Shelf", "S_Shore"),]$label <- "shelf"
bpdf[bpdf$`Island Region` %in% c("N_Shore", "S_Shore"),]$label <- "shore"
# new plot with compact legend
p3 <- ggplot(bpdf, aes(x = Tissue, y = Count, fill = label)) +
geom_bar(stat = "identity") + theme_bw() +
theme(axis.text.x = element_text(angle = 90),
legend.position = legendpos,
legend.title = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank()) +
guides(fill = guide_legend(nrow = 2, byrow = TRUE))
#---------------------------------------
# composite plot, horizontal arrangement
#---------------------------------------
grid.arrange(p1, p2, p3, ncol = 3, bottom = "Tissue",
left = "Number of\nProbes")
