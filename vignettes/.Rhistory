typestr <- paste0(str1, which.type, str2)
filt.type <- grepl(paste0(".*", which.type,".*"), sm[,1])
filt.all <- filt.type & grepl(paste0(".*", which.class,".*"), sm[,1])
dnc <- sm[filt.all, 1]
if(length(dnc) == 0){
stop("No files of class and type found.")
} else if(length(dnc) > 1){
tsv <- as.numeric(gsub(".*_", "", dnc)) # timestamps
tsf <- which(tsv == max(tsv))[1] # first instance
dnc <- dnc[tsf]
}
} else{
dnc <- fn
check.cond1 <- grepl("(\\.h5$|.*h5se.*)", dnc)
check.cond2 <- dnc %in% sm[,1]
condpass <- check.cond1 & check.cond2
if(!condpass){stop("Provided fn not found on server.")}
}
if(!download){
message("File confirmed on server. Returning.")
return(dnc)
}
# manage download loc
dct1 <- ifelse(!dir.exists(dfp) & !dfp == "", try(dir.create(dfp)), TRUE)
dfp.dn <- paste(c(dfp, dnc), collapse = "/")
if(which.type == "h5"){
dct2 <- try(file.create(dfp.dn))
} else{dct2 <- try(dir.create(dfp.dn))}
if(!(dct1 & dct2)){
stop("There was a problem with the download dest. Do you have write access?")
}
dn.url <- paste0(url, dnc)
if(which.type == "h5"){fl.clean <- ""} else{
fnv <- unlist(strsplit(as.character(sm[2,4]), ";"))
fl.clean <- gsub("( .*|`)", "", fnv)
}
if(verbose){message("Downloading file(s)...")}
dll <- list()
for(i in 1:length(fl.clean)){
fpath <- paste0(c(dn.url, fl.clean[i]), collapse = "")
cf = RCurl::CFILE(paste0(dfp.dn, fl.clean[i]), mode="wb")
dll[[i]] <- try(RCurl::curlPerform(url = fpath, writedata = cf@ref,
.opts = list(ssl.verifypeer = sslver)))
}
if(length(dll[dll==0]) == length(dll)){
if(verbose){message("Finished download, returning file path.")}
return(dfp.dn)
} else{
if(verbose){message("Download incomplete for file ", fl.clean[which(dll!=0)])}
return(NULL)
}
return(NULL)
}
get_rmdl(show.files = TRUE, download = FALSE)
servermatrix <- function(dn, url = "https://recount.bio/data/",
printmatrix = TRUE, verbose = FALSE, recursive = TRUE){
dt <- unlist(strsplit(dn, "\r\n"))
dt <- gsub('(.*\">|/</a>|</a>)', "", dt)
dt <- dt[grepl("remethdb", dt)]
drows <- lapply(as.list(dt), function(x){
return(unlist(strsplit(gsub("[ ]+", ";", x), ";")))
})
dm <- do.call(rbind, drows)
colnames(dm) <- c("filename", "date", "time", "size (bytes)")
if(recursive){
sv <- c() # file sizes vector
fnv <- dm[grepl("h5se", dm[,1]), 1]
fnexclude <- c()
for(f in fnv){
fv <- RCurl::getURL(paste0(url, f, "/"), dirlistonly = TRUE,
.opts = list(ssl.verifypeer = sslver))
fvv <- unlist(strsplit(fv, "\r\n"))
which.start <- which(grepl("Index", fvv))[2] + 1
which.end <- which(grepl("/pre", fvv)) - 1
fvf <- fvv[which.start:which.end]
fniv <- c()
for(fni in fvf){
name <- gsub('.*\">', '', gsub("</a>.*", "", fni))
size <- gsub(".* ", "", fni)
fniv <- c(fniv, paste0("`", name, "`", " = ", size))
}
# check for h5se completeness
cond.assays <- length(fniv[grepl("assays", fniv)]) = 1
cond.se <- length(fniv[grepl("se", fniv)]) = 1
sv <- c(sv, paste(fniv, collapse = ";"))
if(!(cond.assays & cond.se)){fnexclude <- c(fnexclude, f)}
}
}
dm[grepl("h5se", dm[,1]), 4] <- sv
dm <- dm[!dm[,1] %in% fnexclude,] # filter incomplete h5se files
return(dm)
}
get_rmdl <- function(fn = NULL, show.files = FALSE,
which.class = c("rg", "gm", "gr", "test"),
which.type = c("h5se", "h5"),
url = "https://recount.bio/data/",
dfp = "downloads", download = TRUE,
verbose = TRUE, sslver = FALSE){
if(verbose){message("Retrieving data dirnames from server...")}
# set up rcurl call
ftpuseopt <- ifelse(show.files, FALSE, TRUE)
dirlistopt <- ifelse(show.files, FALSE, TRUE)
dn <- RCurl::getURL(url, ftp.use.epsv = ftpuseopt, dirlistonly = dirlistopt,
.opts = list(ssl.verifypeer = sslver))
if(verbose){message("Getting file data from server.")}
sm <- servermatrix(dn)
if(show.files & !download){
if(verbose){message("Showing server file data")}
prmatrix(sm)
}
if(is.null(fn)){
# clean query results
str1 <- ifelse(which.type == "h5", "\\.", ".*")
str2 <- ifelse(which.type == "h5", "$", ".*")
typestr <- paste0(str1, which.type, str2)
filt.type <- grepl(paste0(".*", which.type,".*"), sm[,1])
filt.all <- filt.type & grepl(paste0(".*", which.class,".*"), sm[,1])
dnc <- sm[filt.all, 1]
if(length(dnc) == 0){
stop("No files of class and type found.")
} else if(length(dnc) > 1){
tsv <- as.numeric(gsub(".*_", "", dnc)) # timestamps
tsf <- which(tsv == max(tsv))[1] # first instance
dnc <- dnc[tsf]
}
} else{
dnc <- fn
check.cond1 <- grepl("(\\.h5$|.*h5se.*)", dnc)
check.cond2 <- dnc %in% sm[,1]
condpass <- check.cond1 & check.cond2
if(!condpass){stop("Provided fn not found on server.")}
}
if(!download){
message("File confirmed on server. Returning.")
return(dnc)
}
# manage download loc
dct1 <- ifelse(!dir.exists(dfp) & !dfp == "", try(dir.create(dfp)), TRUE)
dfp.dn <- paste(c(dfp, dnc), collapse = "/")
if(which.type == "h5"){
dct2 <- try(file.create(dfp.dn))
} else{dct2 <- try(dir.create(dfp.dn))}
if(!(dct1 & dct2)){
stop("There was a problem with the download dest. Do you have write access?")
}
dn.url <- paste0(url, dnc)
if(which.type == "h5"){fl.clean <- ""} else{
fnv <- unlist(strsplit(as.character(sm[2,4]), ";"))
fl.clean <- gsub("( .*|`)", "", fnv)
}
if(verbose){message("Downloading file(s)...")}
dll <- list()
for(i in 1:length(fl.clean)){
fpath <- paste0(c(dn.url, fl.clean[i]), collapse = "")
cf = RCurl::CFILE(paste0(dfp.dn, fl.clean[i]), mode="wb")
dll[[i]] <- try(RCurl::curlPerform(url = fpath, writedata = cf@ref,
.opts = list(ssl.verifypeer = sslver)))
}
if(length(dll[dll==0]) == length(dll)){
if(verbose){message("Finished download, returning file path.")}
return(dfp.dn)
} else{
if(verbose){message("Download incomplete for file ", fl.clean[which(dll!=0)])}
return(NULL)
}
return(NULL)
}
get_rmdl(show.files = TRUE, download = FALSE)
servermatrix
url = "https://recount.bio/data/"
show.files = TRUE
ftpuseopt <- ifelse(show.files, FALSE, TRUE)
dirlistopt <- ifelse(show.files, FALSE, TRUE)
dn <- RCurl::getURL(url, ftp.use.epsv = ftpuseopt, dirlistonly = dirlistopt,
.opts = list(ssl.verifypeer = sslver))
sslver = FALSE
dn <- RCurl::getURL(url, ftp.use.epsv = ftpuseopt, dirlistonly = dirlistopt,
.opts = list(ssl.verifypeer = sslver))
sm <- servermatrix(dn)
servermatrix <- function(dn, url = "https://recount.bio/data/",
printmatrix = TRUE, verbose = FALSE, recursive = TRUE){
dt <- unlist(strsplit(dn, "\r\n"))
dt <- gsub('(.*\">|/</a>|</a>)', "", dt)
dt <- dt[grepl("remethdb", dt)]
drows <- lapply(as.list(dt), function(x){
return(unlist(strsplit(gsub("[ ]+", ";", x), ";")))
})
dm <- do.call(rbind, drows)
colnames(dm) <- c("filename", "date", "time", "size (bytes)")
if(recursive){
sv <- c() # file sizes vector
fnv <- dm[grepl("h5se", dm[,1]), 1]
fnexclude <- c()
for(f in fnv){
fv <- RCurl::getURL(paste0(url, f, "/"), dirlistonly = TRUE,
.opts = list(ssl.verifypeer = sslver))
fvv <- unlist(strsplit(fv, "\r\n"))
which.start <- which(grepl("Index", fvv))[2] + 1
which.end <- which(grepl("/pre", fvv)) - 1
fvf <- fvv[which.start:which.end]
fniv <- c()
for(fni in fvf){
name <- gsub('.*\">', '', gsub("</a>.*", "", fni))
size <- gsub(".* ", "", fni)
fniv <- c(fniv, paste0("`", name, "`", " = ", size))
}
# check for h5se completeness
cond.assays <- length(fniv[grepl("assays", fniv)]) == 1
cond.se <- length(fniv[grepl("se", fniv)]) == 1
sv <- c(sv, paste(fniv, collapse = ";"))
if(!(cond.assays & cond.se)){fnexclude <- c(fnexclude, f)}
}
}
dm[grepl("h5se", dm[,1]), 4] <- sv
dm <- dm[!dm[,1] %in% fnexclude,] # filter incomplete h5se files
return(dm)
}
sm <- servermatrix(dn)
sm
library(recountmethylation)
?download_h5se_gm
?getrg
?data_mdpost
utils::news(package="recountmethylation")
library(recountmethylation)
utils::news(package="recountmethylation")
?news
news(package = "utils")
library(minfi)
news(package = "minfi")
utils::news(package = "minfi")
suppressMessages(library(rhdf5))
suppressMessages(library(minfi))
suppressMessages(library(recountmethylation))
suppressMessages(library(knitr))
suppressMessages(library(ggplot2))
suppressMessages(library(gridExtra))
opts_chunk$set(eval = FALSE, echo = TRUE,
warning = FALSE, message = FALSE)
# load rdata
sf <- system.file(file.path("extdata", "data_analyses"),
package = "recountmethylation")
load(file.path(sf, "data_analyses.RData"))
load("~/Desktop/recount-rep/get_studies/SRP012682_gtexsubset/rse_gene.Rdata")
dim(rse_gene)
library(recountmethylation)
library(recountmethylation)
cite(recountmethylation)
cite("recountmethylation")
library(minfi)
cite(minfi)
cite("minfi")
citation(recountmethylation)
citation("recountmethylation")
citation("minfi")
library(recountmethylation)
sm <- get_rmdl(download = FALSE)
sm
class(sm)
sm <- get_rmdl(show.files = TRUE, download = FALSE)
sm
url = "https://recount.bio/data/"
show.files = FALSE
sslver = FALSE
ftpuseopt <- dirlistopt <- ifelse(show.files, FALSE, TRUE) # rcurl setup
dn <- RCurl::getURL(url, ftp.use.epsv = ftpuseopt, dirlistonly = dirlistopt,
.opts = list(ssl.verifypeer = sslver))
sm <- servermatrix(dn = dn, sslver = sslver)
dim(sm)
ncol(sm)
colnames(sm)
sm
class(sm)
is.matrix(sm)
class(sm[,1])
gds_idat2rg(c("GSM2465267", "GSM2814572"))
?gds_idat2rg
?gds_idatquery
devtools::test("recountmethylation")
install.packages("R.utils")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocFileCache")
library(recountmethylation)
getdb_h5_test()
getdb_h5_test()
?readline
readline("aaaaa\naaaaaaa")
readlines("aaaaaa\naaaaaa")
readLines("aaaaaa\naaaaaa")
library(recountmethylation)
getdb_h5_test()
getdb_h5_test()
library(recountmethylation)
getdb_h5_test()
getdb_h5se_test()
getdb_h5se_test()
getdb_h5se_test()
dat <- getdb_h5se_test()
ls()
c <- 1
ls()
library(recountmethylation)
library(ExperimentHub)
BiocManager::install("ExperimentHub")
library(ExperimentHub)
hub = ExperimentHub()
file = hub[["EH3773"]]
file
hub
file
hub[["EH3773"]]
browseVignettes("recountmethylation")
query(hub, "recountmethylation")
eid <- "EH3776"
apData[[eid]]
rmdat <- query(hub, "recountmethylation")
rmdat
eid <- "EH3776"
rmdat[[eid]]
hub[["EH3773"]]
rmdat
eid <- "EH3778"
rmdat[[eid]]
dim(rmdat)
rmdat[[eid]]
list.files(/Users/maden/Library/Caches/ExperimentHub/59b359558941_3814)
list.files("/Users/maden/Library/Caches/ExperimentHub/59b359558941_3814")
list.files("Users/maden/Library/Caches/ExperimentHub/")
list.files("Users/maden/Library/Caches/ExperimentHub")
eid <- "EH3778"
dat <- rmdat[[eid]]
dim(dat)
class(dat)
dat
colnames(dat)
rmdat
eid <- "EH3776"
rmdat[[eid]]
bfcadd()
object[["EH3773"]]
rmdat[["EH3773"]]
rmdat[["EH3778"]]
rmdat
possibleDates(rmdat)
snapshotDate(rmdat)
library(GenomicRanges)
?subsetByOverlaps
?mclapply
jvect <- c(1,2,3)
jvect ^ 2
jvect^2
sum(0)
0/sum(0)
load("/Users/maden/Desktop/recount-rep/spliceclock_project/gtexv2/jxcounts_sampfilt15000/jxtotcount_minsampfilt15000.rda")
colnames(samp)
summary(samp$jx.count.minsamp15000)
summary(samp$jx.reads.minsamp15000)
devtools::install_github("hhhh5/ewastools")
library(ewastools)
load("~/Documents/GitHub/recountmethylation/inst/extdata/metadata/md_00-00-01_1583780004.rda")
head(md$gsm)
head(md$gseid)
?prcomp
devtools::github_install("metamaden/recountmethylationManuscriptSupplement")
library(recountmethylationManuscriptSupplement)
devtools::install_github("metamaden/recountmethylationManuscriptSupplement")
library(recountmethylationManuscriptSupplement)
vignette(recountmethylationManuscriptSupplement)
vignette("recountmethylationManuscriptSupplement")
vignette(package="grid")
library(recountmethylationManuscriptSupplement)
vignette("recountmethylationManuscriptSupplement")
library(recountmethylationManuscriptSupplement)
vignette("recountmethylationManuscriptSupplement")
vignette("recountmethylationManuscriptSupplement")
vignette(package = "recountmethylationManuscriptSupplement")
browseVignettes("recountmethylationManuscriptSupplement")
list.files(system.file("doc", package = "recountmethylationManuscriptSupplement"))
list.files(system.file("doc", package = "grid"))
vignettes("grid")
browseVignettes("grid")
list.files(system.file("doc", package = "recountmethylationManuscriptSupplement"))
library(recountmethylationManuscriptSupplement)
browseVignettes("recountmethylationManuscriptSupplement")
vignettes("recountmethylationManuscriptSupplement")
devtools::install_github("metamaden/recountmethylationManuscriptSupplement",
build_vignettes = TRUE)
library(recountmethylationManuscriptSupplement)
vignettes(recountmethylationManuscriptSupplement)
browseVignettes(recountmethylationManuscriptSupplement)
browseVignettes("recountmethylationManuscriptSupplement")
vignettes("recountmethylationManuscriptSupplement")
?install
setwd("/Volumes/LaCie/recountmethylation/biocdev/recount.bio/data")
library(recountmethylation)
library(wateRmelon)
library(minfi)
library(HDF5Array)
rgset <- loadHDF5SummarizedExperiment("remethdb_h5se-rg_0-0-1_1590090412")
gmset <- loadHDF5SummarizedExperiment("remethdb-h5se_gm_0-0-1_1590090412")
grset <- loadHDF5SummarizedExperiment("remethdb-h5se_gr_0-0-1_1590090412")
predage <- agep(getBeta(grset))
library(recountmethylationManuscriptSupplement)
?getblocks
b
b <- blocks[1]
blocks <- getblocks(ncol(rgset), 50)
b <- blocks[1]
b
rgf <- rgset[,b]; msf <- preprocessRaw(rgf)
class(blocks)
class(blocks[[1]])
rgf <- rgset[, unlist(b)]; msf <- preprocessRaw(rgf)
grf <- grset[,colnames(rgf)]
identical(colnames(grf), colnames(rgf))
celltypepred <- estimateCellCounts(rgf)
class(rgf)
?estimateCellCounts
celltypepred <- estimateCellCounts(rgf)
sexpred <- getSex(msf)
msf <- mepToGenome(msf)
msf <- mapToGenome(msf)
sexpred <- getSex(msf)
sexpred
predage <- agep(getBeta(grf))
predage
dim(predage)
mdf <- cbind(predage, sexpred[,3])
head(mdf)
celltypepred <- estimateCellCounts(rgf)
class(getRed(rgf))
getRed(rgf) <- as.matrix(getRed(rgf))
?RGChannelSet
dim(Green(rgf))
?getGreen
Red(rgf) <- as.matrix(getRed(rgf))
Green(rgf) <- as.matrix(getGreen(rgf))
rgf.matrix <- RGChannelSet(Green = as.matrix(getGreen(rgf)),
Red = as.matrix(getRed(rgf)))
celltypepred <- estimateCellCounts(rgf.matrix)
platform(rgf)
annotation(rgf)
rgf.matrix <- RGChannelSet(Green = as.matrix(getGreen(rgf)),
Red = as.matrix(getRed(rgf)),
annotation = annotation(rgf))
celltypepred <- estimateCellCounts(rgf.matrix)
celltypepred
dim(celltypepred)
head(celltypepred)
mdf <- cbind(predage, cbind(sexpred[,3], celltypepred))
head(mdf)
dim(mdf)
b
max(b)
message("finished up to sample index ", max(unlist(b)))
mdmod <- cbind(data.frame(gsm = rownames(mdmod)),
mdmod)
mdmod$gsm <- gsub("\\..*", "", mdmod)
mdmod <- mdmod[!duplicated(mdmod$gsm),]
mdmod <- rbind(mdmod, mdf)
mdmod <- matrix(nrow = 0, ncol = 8)
mdmod <- rbind(mdmod, mdf)
mdmod <- cbind(data.frame(gsm = rownames(mdmod)),
mdmod)
mdmod$gsm <- gsub("\\..*", "", mdmod)
mdmod <- mdmod[!duplicated(mdmod$gsm),]
mdmod <- cbind(data.frame(gsm = rownames(mdmod)),
mdmod)
mdmod$gsm <- gsub("\\..*", "", mdmod$gsm)
mdmod <- mdmod[!duplicated(mdmod$gsm),]
head(mdmod)
dim(mdmod)
rownames(mdmod) <- ""
table.fn <- "mdmod"
mdmod <- as.data.frame(cbind(data.frame(gsm = rownames(mdmod)), mdmod),
stringsAsFactors = FALSE)
head(mdmod)
mdmod$gsm <- gsub("\\..*", "", mdmod$gsm)
head(mdmod)
mdmod$gsm
mdmod <- as.data.frame(cbind(data.frame(gsm = rownames(mdmod)), mdmod),
stringsAsFactors = FALSE row.names = FALSE)
mdmod <- as.data.frame(cbind(data.frame(gsm = rownames(mdmod)), mdmod),
stringsAsFactors = FALSE, row.names = FALSE)
mdmod <- as.data.frame(mdmod, stringsAsFactors = FALSE)
mdmod$gsm <- rownames(mdmod)
mdmod$gsm <- gsub("\\..*", "", mdmod$gsm)
colnames(mdmod)
mdmod <- matrix(nrow = 0, ncol = 8)
mdmod <- rbind(mdmod, mdf)
mdmod <- as.data.frame(mdmod, stringsAsFactors = FALSE)
colnames(mdmod) <- c("predage", "predsex",
paste0("predcell.", colnames(mdmod)[3:8]))
mdmod
colnames(mdmod)
head(mdmod)
mdmod <- matrix(nrow = 0, ncol = 8)
mdmod <- rbind(mdmod, mdf)
table.fn <- "mdmod"
mdmod <- as.data.frame(mdmod, stringsAsFactors = FALSE)
colnames(mdmod) <- c("predage", "predsex",
paste0("predcell.", colnames(mdmod)[3:8]))
mdmod$gsm <- gsub("\\..*", "", rownames(mdmod))
mdmod <- mdmod[!duplicated(mdmod$gsm),]
head(mdmod)
setwd("~/Documents/GitHub/recountmethylationManuscriptSupplement/vignettes")
setwd("~/Documents/GitHub/recountmethylationManuscriptSupplement/vignettes")
?bametric
library(recountmethylationManuscriptSupplement)
?bametric
?bathresh
